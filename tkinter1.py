#! /usr/bin/env python
#  -*- coding: utf-8 -*-
#
# GUI module generated by PAGE version 7.5
#  in conjunction with Tcl version 8.6
#    Sep 15, 2022 12:44:15 PM CAT  platform: Windows NT

import sys
import tkinter as tk
import tkinter.ttk as ttk
from tkinter.constants import *
import tensorflow as tf
import os.path
import torch
import cv2
import time
import numpy as np
from PIL import Image
import matplotlib.pyplot as plt
import os
import uuid
from tkinter.filedialog import askopenfilename
import sys
#import tkinter.messagebox as tkMessageBox


_script = sys.argv[0]
_location = os.path.dirname(_script)

import  run as tkinter_support

_bgcolor = '#d9d9d9'  # X11 color: 'gray85'
_fgcolor = '#000000'  # X11 color: 'black'
_compcolor = 'gray40' # X11 color: #666666
_ana1color = '#c3c3c3' # Closest X11 color: 'gray76'
_ana2color = 'beige' # X11 color: #f5f5dc
_tabfg1 = 'black' 
_tabfg2 = 'black' 
_tabbg1 = 'grey75' 
_tabbg2 = 'grey89' 
_bgmode = 'light' 

_style_code_ran = 0
def _style_code():
    global _style_code_ran
    if _style_code_ran:
       return
    style = ttk.Style()
    if sys.platform == "win32":
       style.theme_use('winnative')
    style.configure('.',background=_bgcolor)
    style.configure('.',foreground=_fgcolor)
    style.configure('.',font='TkDefaultFont')
    style.map('.',background =
       [('selected', _compcolor), ('active',_ana2color)])
    if _bgmode == 'dark':
       style.map('.',foreground =
         [('selected', 'white'), ('active','white')])
    else:
       style.map('.',foreground =
         [('selected', 'black'), ('active','black')])
    _style_code_ran = 1

from PIL import Image, ImageTk

class Toplevel1:
    def __init__(self, top=None):
        '''This class configures and populates the toplevel window.
           top is the toplevel containing window.'''
          
        global modely
        global models
        modely  = torch.hub.load('ultralytics/yolov5','custom',path =os.path.join(sys.path[0], "best.pt"))
        models = tf.lite.Interpreter(model_path=os.path.join(sys.path[0],"model.tflite"))

        top.geometry("955x620")
        top.minsize(120, 1)
        top.maxsize(1540, 845)
        top.resizable(0,  0)
        top.title("Cloud App.")
        top.configure(background="#d9d9d9")

        self.top = top
        self.persentage = tk.StringVar()
        self.val = tk.StringVar()

        self.Label1 = tk.Label(self.top)
        self.Label1.place(x=0, y=-20, height=721, width=1220)
        self.Label1.configure(anchor='w')
        self.Label1.configure(background="#000051")
        self.Label1.configure(compound='left')
        self.Label1.configure(disabledforeground="#a3a3a3")
        self.Label1.configure(foreground="#000037")
        photo_location = os.path.join(_location,"./Capture.jpg")
        global _img0
        _img0 = ImageTk.PhotoImage(file=photo_location)
        self.Label1.configure(image=_img0)
        
        self.Label5 = tk.Label(self.top)
        self.Label5.place(x=300, y=100, height=480, width=640)
        self.Label5.configure(anchor='w')
        self.Label5.configure(background="#000051")
        self.Label5.configure(compound='left')
        self.Label5.configure(disabledforeground="#a3a3a3")
        self.Label5.configure(foreground="#000037")
        photo_location1 = os.path.join(_location,"./cam.jpg")
        global _img1
        _img1 = ImageTk.PhotoImage(file=photo_location1)
        self.Label5.configure(image=_img1)

        _style_code()
        self.TButton1_1 = ttk.Button(self.top)
        self.TButton1_1.place(x=20, y=289, height=55, width=239)
        self.TButton1_1.configure(takefocus="")
        self.TButton1_1.configure(text='''LIVE CLOUD DETECTION''')
        self.TButton1_1.configure(compound='left')
        self.TButton1_1.configure(cursor="star")
        self.TButton1_1.configure(command=self.yolo)
        
        

        self.TButton1_2 = ttk.Button(self.top)
        self.TButton1_2.place(x=20, y=219, height=55, width=239)
        self.TButton1_2.configure(takefocus="")
        self.TButton1_2.configure(text='''OPEN CAMERA''')
        self.TButton1_2.configure(compound='left')
        self.TButton1_2.configure(cursor="star")
        self.TButton1_2.configure(command=self.camera)

        self.TButton1_3 = ttk.Button(self.top)
        self.TButton1_3.place(x=20, y=359, height=55, width=239)
        self.TButton1_3.configure(takefocus="")
        self.TButton1_3.configure(text='''CLOUD SEGMENTATION''')
        self.TButton1_3.configure(compound='left')
        self.TButton1_3.configure(cursor="star")
        self.TButton1_3.configure(command=self.star_seg)
        
        self.TButton1_4 = ttk.Button(self.top)
        self.TButton1_4.place(x=20, y=90, height=55, width=239)
        self.TButton1_4.configure(takefocus="")
        self.TButton1_4.configure(text='''CLOUD DETECTION''')
        self.TButton1_4.configure(compound='left')
        self.TButton1_4.configure(cursor="star")
        self.TButton1_4.configure(command=self.yolon)
        
        self.TButton1_5 = ttk.Button(self.top)
        self.TButton1_5.place(x=200, y=470, height=60, width=60)
        self.TButton1_5.configure(takefocus="")
        self.TButton1_5.configure(text='''Graph''')
        self.TButton1_5.configure(compound='left')
        self.TButton1_5.configure(cursor="star")
        self.TButton1_5.configure(command=self.graph)

        self.menubar = tk.Menu(top,font="TkMenuFont",bg=_bgcolor,fg=_fgcolor)
        top.configure(menu = self.menubar)

        self.Label2 = tk.Label(self.top)
        self.Label2.place(x=20, y=428, height=28, width=170)
        self.Label2.configure(anchor='w')
        self.Label2.configure(background="#000033")
        self.Label2.configure(compound='left')
        self.Label2.configure(disabledforeground="#a3a3a3")
        self.Label2.configure(font="-family {Yu Gothic UI Semibold} -size 20 -weight bold -slant italic")
        self.Label2.configure(foreground="#ffffff")
        self.Label2.configure(takefocus="")
        self.Label2.configure(text='''Cloud ratio :''')

        self.Label2_1 = tk.Label(self.top)
        self.Label2_1.place(x=180, y=428, height=28, width=100)
        self.Label2_1.configure(activebackground="#f9f9f9")
        self.Label2_1.configure(anchor='w')
        self.Label2_1.configure(background="#000033")
        self.Label2_1.configure(compound='left')
        self.Label2_1.configure(disabledforeground="#a3a3a3")
        self.Label2_1.configure(font="-family {Yu Gothic UI Semibold} -size 20 -weight bold -slant italic")
        self.Label2_1.configure(foreground="#f2f2ff")
        self.Label2_1.configure(highlightbackground="#d9d9d9")
        self.Label2_1.configure(highlightcolor="black")
        self.Label2_1.configure(takefocus="")
        self.Label2_1.configure(text='''30 %''')
        self.Label2_1.configure(textvariable=self.persentage)
        self.persentage.set("   ")

        self.Label3 = tk.Label(self.top)
        self.Label3.place(x=20, y=166, height=28, width=188)
        self.Label3.configure(anchor='w')
        self.Label3.configure(background="#000033")
        self.Label3.configure(compound='left')
        self.Label3.configure(disabledforeground="#a3a3a3")
        self.Label3.configure(font="-family {Yu Gothic UI Semibold} -size 20 -weight bold -slant italic")
        self.Label3.configure(foreground="#ffffff")
        self.Label3.configure(text='''No. of frames :''')

        self.TSpinbox1 = ttk.Spinbox(self.top, from_=1, to=30)
        self.TSpinbox1.set(4)
        self.TSpinbox1.configure(font="-family {Segoe UI} -size 19")
        self.TSpinbox1.place(x=210, y=165, height=28, width=70)
        self.TSpinbox1.configure(background="white")
        self.TSpinbox1.configure(takefocus="")

        self.TLabel1 = ttk.Label(self.top)
        self.TLabel1.place(x=20, y=470, height=60, width=175)
        self.TLabel1.configure(background="#ffffff")
        self.TLabel1.configure(foreground="#000000")
        self.TLabel1.configure(font="-family {Yu Gothic UI Semibold} -size 21 -weight bold -slant italic")
        self.TLabel1.configure(relief="flat")
        self.TLabel1.configure(anchor='w')
        self.TLabel1.configure(justify='left')
        self.TLabel1.configure(text='''validation''')
        self.TLabel1.configure(textvariable=self.val)
        self.val.set('''   validation   ''')
        self.TLabel1.configure(compound='left')
        
    def yolon(self):
        model=modely
        imgag = askopenfilename()
        imgname = imgag.split("/")[-1]
        t1 = time.time()
        results = model(imgag)
        t2 = time.time()
        delta = t2-t1
        with open('Yolo data.txt', 'a') as f:
            f.write(str(imgname)+":"+str(delta)+"\n")
        veiwe = cv2.resize(np.squeeze(results.render()),[640,480])
        #merged = cv2.cvtColor(merged, cv2.COLOR_BGR2RGB)
        global _img3
        _img3 = ImageTk.PhotoImage(image=Image.fromarray(veiwe))
        self.Label5.configure(image=_img3)
        
        
    def yolo(self):
        model  = modely
        print("ok")
        print(int(self.TSpinbox1.get()))
        cap = cv2.VideoCapture(0)
        fr = 0
        while cap.isOpened():
            
            time.sleep(1 / int(self.TSpinbox1.get()))
            ret, frame = cap.read()
            
            #model
            t1 = time.time()
            result = model(frame)
            t2 = time.time()
            delta = t2-t1
            cv2.imshow('YOLOv5',np.squeeze(result.render()))
            
            fr = fr + 1
            
            with open('yolo data.txt', 'a') as f:
                f.write(str(fr)+":"+str(delta)+"\n")
            

            
            
            if cv2.waitKey(10) & 0xFF == ord('q'):
                break
            elif cv2.waitKey(10) & 0xFF == ord('c'):
                cv2.imwrite('images yolo/'+str(uuid.uuid1())[:8]+'.jpg',np.squeeze(result.render()))
                cv2.imwrite('images/'+str(uuid.uuid1())[:8]+'.jpg',frame)
                print("done")
                self.TLabel1.configure(background="#ffffff")
                self.TLabel1.configure(foreground="#000000")
                self.val.set("Smile")
                #tkMessageBox.showinfo(title="Greetings", message="A photo is captured")
                
                
        cap.release()
        cv2.destroyAllWindows()
        
    def camera(self):
        cap = cv2.VideoCapture(0)
        while cap.isOpened():
            
            time.sleep(1 / int(self.TSpinbox1.get()))
            ret, frame = cap.read()
            #model
            cv2.imshow('Camera',frame)
            
            if cv2.waitKey(10) & 0xFF == ord('q'):
                break
            elif cv2.waitKey(10) & 0xFF == ord('c'):
                cv2.imwrite('images/'+str(uuid.uuid1())[:8]+'.jpg',frame)
                print("done")
                self.TLabel1.configure(background="#ffffff")
                self.TLabel1.configure(foreground="#000000")
                self.val.set("Smile")
                break
                #tkMessageBox.showinfo(title="Greetings", message="A photo is captured")
                
        cap.release()
        cv2.destroyAllWindows()
        
    def star_seg(self):
        plt. clf()
        filename = askopenfilename()
        imagename = filename.split('/')[-1]
        

        model = models
        classes = [  "Cloud" ,  "Background" ,  ]
        
        t1 = time.time()
            # Learn about its input and output details
        input_details = model.get_input_details()
        output_details = model.get_output_details()
        model.resize_tensor_input(input_details[0]['index'], (1, 256, 256, 3))
        model.allocate_tensors()
        img = Image.open(filename).convert('RGB')
        img = img.resize((256, 256))
        orimage = cv2.imread(filename)
        img_np = np.array( img )[None].astype('float32')
        model.set_tensor(input_details[0]['index'], img_np)
        model.invoke()

        segmentation_output = model.get_tensor(output_details[0]['index'])[0].argmax(-1)
        segmentation_output_cv = np.array(segmentation_output).astype('int')
        
        t2 = time.time()
        delta = t2-t1
        print("time taken = {}".format(delta))
        
        
        #plt.axis('off')
        plt.imshow(segmentation_output)
        img_cv1 = cv2.convertScaleAbs(segmentation_output_cv, alpha=(255.0))
        img_cv = cv2.resize(img_cv1, [orimage.shape[1],orimage.shape[0]])
        orimages = cv2.resize(orimage,[640,480])
        
        mix = cv2.resize(cv2.convertScaleAbs(segmentation_output_cv, alpha=(1)), [640,480])
        bb , gg , rr = cv2.split(orimages)
        
        merged = cv2.merge([bb + (200 * mix), gg + (200 * mix), rr + (50 * mix)])
        #cv2.imshow("Merged",merged)
        cv2.imwrite("segmentation result/mix "+imagename,merged)
        
        num_wight = np.sum(segmentation_output == 1)
        num_black = np.sum(segmentation_output == 0)
        print(num_wight)
        print(num_black)
        ratio = (num_wight/(num_wight + num_black))*100
        print("{:.2f} %".format(ratio))
        
        with open('seg data.txt', 'a') as f:
            f.write(str(imagename)+":"+str(delta)+":"+str(ratio)+"\n")
        

        if ratio >=40:
            x = "    Invalid    "
            self.TLabel1.configure(background="#f5010a")
            self.TLabel1.configure(foreground="#000000")
        else:
            x = "    Valid    "
            self.TLabel1.configure(background="#80ff00")
            self.TLabel1.configure(foreground="#000000")
        
        self.persentage.set("{:.2f} %".format(ratio))
        self.val.set(x)
        
        
        print(x)
        
        #photo_location2 = os.path.join(_location,"./segmentation result/mix "+imagename)
        merged = cv2.cvtColor(merged, cv2.COLOR_BGR2RGB)
        global _img2
        _img2 = ImageTk.PhotoImage(image=Image.fromarray(merged))
        self.Label5.configure(image=_img2)
        
        plt.savefig("segmentation result/plt "+imagename)
        orimage = cv2.imread(filename)
        #cv2.imshow("Orignal",orimage)
        # cv2.waitKey(0) 
        # cv2.destroyAllWindows()
        cv2.imwrite("segmentation result/"+imagename,img_cv)
        #cv2.imshow("Mask",img_cv)
        #cv2.waitKey(0) 
        #cv2.destroyAllWindows()
    def graph(self):
        
        plt. clf()
        filename = askopenfilename()
        dataname = filename.split('/')[-1]
        
        file1 = open(filename, 'r')
        Lines = file1.readlines()
        xax = []
        yax = []
        label = []
        co = 1
        for line in Lines:
            name = line.split(":")[0]
            speed = line.split(":")[1]
            yax.append(float(speed))
            xax.append(co)
            label.append(name)
            co = co + 1
        plt.plot(xax, yax)
 
        # naming of x-axis and y-axis
        plt.xlabel("Images")
        plt.ylabel("Speed in sec")
 
        # naming the title of the plot
        plt.title(dataname[:-4])
        

 
        # setting x-axis values and specifying rotation
        # for the labels in degrees
        plt.xticks(xax, label, rotation=90)
 
        plt.savefig(dataname[:-4], bbox_inches='tight')
        graphimg =cv2.imread(dataname[:-4]+".png")
        graphimg = cv2.resize(graphimg, [640,480])
        global _img6
        _img6 = ImageTk.PhotoImage(image=Image.fromarray(graphimg))
        self.Label5.configure(image=_img6)
        

def start_up():
    if not os.path.exists("images"):
        os.makedirs("images")

    if not os.path.exists("images yolo"):
        os.makedirs("images yolo")
    
    if not os.path.exists("segmentation result"):
        os.makedirs("segmentation result")
    
    
    tkinter_support.main()

if __name__ == '__main__':
    tkinter_support.main()




